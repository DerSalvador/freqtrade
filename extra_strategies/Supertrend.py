"""
Supertrend strategy:
* Description: Generate a 3 supertrend indicators for 'entry' strategies & 3 supertrend indicators for 'exit' strategies
               Buys if the 3 'entry' indicators are 'up'
               Sells if the 3 'exit' indicators are 'down'
* Author: @juankysoriano (Juan Carlos Soriano)
* github: https://github.com/juankysoriano/

*** NOTE: This Supertrend strategy is just one of many possible strategies using `Supertrend` as indicator. It should on any case used at your own risk.
          It comes with at least a couple of caveats:
            1. The implementation for the `supertrend` indicator is based on the following discussion: https://github.com/freqtrade/freqtrade-strategies/issues/30 . Concretelly https://github.com/freqtrade/freqtrade-strategies/issues/30#issuecomment-853042401
            2. The implementation for `supertrend` on this strategy is not validated; meaning this that is not proven to match the results by the paper where it was originally introduced or any other trusted academic resources
"""
import logging
from numpy.lib import math
from freqtrade.strategy import IStrategy, IntParameter
from pandas import DataFrame
import talib.abstract as ta
import numpy as np

class Supertrend(IStrategy):
    INTERFACE_VERSION = 3
    # Buy params, Sell params, ROI, Stoploss and Trailing Stop are values generated by 'freqtrade hyperopt --strategy Supertrend --hyperopt-loss ShortTradeDurHyperOptLoss --timerange=20210101- --timeframe=1h --spaces all'
    # It's encourage you find the values that better suites your needs and risk management strategies
    INTERFACE_VERSION: int = 3
    # Buy hyperspace params:
    entry_params = {'entry_m1': 4, 'entry_m2': 7, 'entry_m3': 1, 'entry_p1': 8, 'entry_p2': 9, 'entry_p3': 8}
    # Sell hyperspace params:
    exit_params = {'exit_m1': 1, 'exit_m2': 3, 'exit_m3': 6, 'exit_p1': 16, 'exit_p2': 18, 'exit_p3': 18}
    # ROI table:
    minimal_roi = {'0': 0.087, '372': 0.058, '861': 0.029, '2221': 0}
    # Stoploss:
    stoploss = -0.265
    # Trailing stop:
    trailing_stop = True
    trailing_stop_positive = 0.05
    trailing_stop_positive_offset = 0.144
    trailing_only_offset_is_reached = False
    timeframe = '1h'
    startup_candle_count = 18
    entry_m1 = IntParameter(1, 7, default=4)
    entry_m2 = IntParameter(1, 7, default=4)
    entry_m3 = IntParameter(1, 7, default=4)
    entry_p1 = IntParameter(7, 21, default=14)
    entry_p2 = IntParameter(7, 21, default=14)
    entry_p3 = IntParameter(7, 21, default=14)
    exit_m1 = IntParameter(1, 7, default=4)
    exit_m2 = IntParameter(1, 7, default=4)
    exit_m3 = IntParameter(1, 7, default=4)
    exit_p1 = IntParameter(7, 21, default=14)
    exit_p2 = IntParameter(7, 21, default=14)
    exit_p3 = IntParameter(7, 21, default=14)

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        for multiplier in self.entry_m1.range:
            for period in self.entry_p1.range:
                dataframe[f'supertrend_1_entry_{multiplier}_{period}'] = self.supertrend(dataframe, multiplier, period)['STX']
        for multiplier in self.entry_m2.range:
            for period in self.entry_p2.range:
                dataframe[f'supertrend_2_entry_{multiplier}_{period}'] = self.supertrend(dataframe, multiplier, period)['STX']
        for multiplier in self.entry_m3.range:
            for period in self.entry_p3.range:
                dataframe[f'supertrend_3_entry_{multiplier}_{period}'] = self.supertrend(dataframe, multiplier, period)['STX']
        for multiplier in self.exit_m1.range:
            for period in self.exit_p1.range:
                dataframe[f'supertrend_1_exit_{multiplier}_{period}'] = self.supertrend(dataframe, multiplier, period)['STX']
        for multiplier in self.exit_m2.range:
            for period in self.exit_p2.range:
                dataframe[f'supertrend_2_exit_{multiplier}_{period}'] = self.supertrend(dataframe, multiplier, period)['STX']
        for multiplier in self.exit_m3.range:
            for period in self.exit_p3.range:
                dataframe[f'supertrend_3_exit_{multiplier}_{period}'] = self.supertrend(dataframe, multiplier, period)['STX']
        return dataframe

    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:  # The three indicators are 'up' for the current candle
        # There is at least some trading volume
        dataframe.loc[(dataframe[f'supertrend_1_entry_{self.entry_m1.value}_{self.entry_p1.value}'] == 'up') & (dataframe[f'supertrend_2_entry_{self.entry_m2.value}_{self.entry_p2.value}'] == 'up') & (dataframe[f'supertrend_3_entry_{self.entry_m3.value}_{self.entry_p3.value}'] == 'up') & (dataframe['volume'] > 0), 'enter_long'] = 1
        return dataframe

    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:  # The three indicators are 'down' for the current candle
        # There is at least some trading volume
        dataframe.loc[(dataframe[f'supertrend_1_exit_{self.exit_m1.value}_{self.exit_p1.value}'] == 'down') & (dataframe[f'supertrend_2_exit_{self.exit_m2.value}_{self.exit_p2.value}'] == 'down') & (dataframe[f'supertrend_3_exit_{self.exit_m3.value}_{self.exit_p3.value}'] == 'down') & (dataframe['volume'] > 0), 'exit_long'] = 1
        return dataframe
    '\n        Supertrend Indicator; adapted for freqtrade\n        from: https://github.com/freqtrade/freqtrade-strategies/issues/30\n    '

    def supertrend(self, dataframe: DataFrame, multiplier, period):
        df = dataframe.copy()
        df['TR'] = ta.TRANGE(df)
        df['ATR'] = ta.SMA(df['TR'], period)
        st = 'ST_' + str(period) + '_' + str(multiplier)
        stx = 'STX_' + str(period) + '_' + str(multiplier)
        # Compute basic upper and lower bands
        df['basic_ub'] = (df['high'] + df['low']) / 2 + multiplier * df['ATR']
        df['basic_lb'] = (df['high'] + df['low']) / 2 - multiplier * df['ATR']
        # Compute final upper and lower bands
        df['final_ub'] = 0.0
        df['final_lb'] = 0.0
        for i in range(period, len(df)):
            df['final_ub'].iat[i] = df['basic_ub'].iat[i] if df['basic_ub'].iat[i] < df['final_ub'].iat[i - 1] or df['close'].iat[i - 1] > df['final_ub'].iat[i - 1] else df['final_ub'].iat[i - 1]
            df['final_lb'].iat[i] = df['basic_lb'].iat[i] if df['basic_lb'].iat[i] > df['final_lb'].iat[i - 1] or df['close'].iat[i - 1] < df['final_lb'].iat[i - 1] else df['final_lb'].iat[i - 1]
        # Set the Supertrend value
        df[st] = 0.0
        for i in range(period, len(df)):
            df[st].iat[i] = df['final_ub'].iat[i] if df[st].iat[i - 1] == df['final_ub'].iat[i - 1] and df['close'].iat[i] <= df['final_ub'].iat[i] else df['final_lb'].iat[i] if df[st].iat[i - 1] == df['final_ub'].iat[i - 1] and df['close'].iat[i] > df['final_ub'].iat[i] else df['final_lb'].iat[i] if df[st].iat[i - 1] == df['final_lb'].iat[i - 1] and df['close'].iat[i] >= df['final_lb'].iat[i] else df['final_ub'].iat[i] if df[st].iat[i - 1] == df['final_lb'].iat[i - 1] and df['close'].iat[i] < df['final_lb'].iat[i] else 0.0
        # Mark the trend direction up/down
        df[stx] = np.where(df[st] > 0.0, np.where(df['close'] < df[st], 'down', 'up'), np.NaN)
        # Remove basic and final bands from the columns
        df.drop(['basic_ub', 'basic_lb', 'final_ub', 'final_lb'], inplace=True, axis=1)
        df.fillna(0, inplace=True)
        return DataFrame(index=df.index, data={'ST': df[st], 'STX': df[stx]})